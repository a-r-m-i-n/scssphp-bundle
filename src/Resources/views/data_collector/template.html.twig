{% extends '@WebProfiler/Profiler/layout.html.twig' %}

{% block toolbar %}
    {% if collector.hasConfig() %}
        {% set status_color = collector.hasErrors() ? 'red' : '' %}

        {% set icon %}

            {% set icon_fill_color = profiler_markup_version == 1 ? '#222' : '#AAA' %}
            {% set icon_height = profiler_markup_version == 1 ? '28' : '24' %}
            <span class="icon">{{ include('@Scssphp/data_collector/scss-logo.svg.twig', { fill_color: icon_fill_color, height: icon_height }) }}</span>
            <span class="sf-toolbar-value">{{ collector.getResults()|length }}</span>
            <span class="sf-toolbar-label">{{ collector.getResults()|length == 1 ? 'Asset' : 'Assets' }}</span>
        {% endset %}

        {% set text %}
            <div class="sf-toolbar-info-piece">
                <b>Managed SCSS assets</b>
                <span class="sf-toolbar-status">{{collector.getResults()|length}}</span>
            </div>
            <div class="sf-toolbar-info-piece">
                <b>Assets with errors</b>
                <span class="sf-toolbar-status" style="{{ collector.hasErrors() ? 'background-color: #f44;' : '' }}">{{collector.getResultsWithErrors()|length}}</span>
            </div>
            <div class="sf-toolbar-info-piece">
                <b>Assets compiled</b>
                <span class="sf-toolbar-status">{{ collector.builtAssets|length }}</span>
            </div>
        {% endset %}

        {{ include('@WebProfiler/Profiler/toolbar_item.html.twig', { 'link': true, 'status': status_color }) }}
    {% endif %}
{% endblock %}

{% block menu %}
    <span class="label label-status-{{ collector.hasErrors() ? 'error' }} {{ collector.config.enabled is same as (false) or collector.config.assets|length == 0 ? 'disabled' }}">
        <span class="icon">{{ include('@Scssphp/data_collector/scss-logo.svg.twig', { height: 32 }) }}</span>
        <strong>ScssPHP</strong>
    </span>
{% endblock %}

{% block panel %}
    <style>
        .error-message {
            font-weight: bold;
            color: var(--color-error);
        }
        .success-message {
            color: var(--color-success);
        }

        .no-bottom-border td {
            border-bottom: 1px solid #fff;
        }

        .bg-error td {
            background: #fcc;
        }

        .bg-gray td {
            background-color: var(--base-1);
        }

        .no-bottom-border.bg-error td {
            border-bottom: 1px solid #fcc;
        }
        .error-line td {
            padding-top: 0;
        }
        table tbody tr td svg {
            margin: 0 0 -3px;
            height: 14px !important;
            width: 14px !important;
        }
    </style>


    <h2>ScssPHP</h2>

    <div class="metrics">
        <div class="metric">
            <span class="value">{{ collector.scssphpVersion }}</span>
            <span class="label">Version</span>
        </div>
        <div class="metric">
            <span class="value">{{ include('@WebProfiler/Icon/' ~ (collector.config.enabled ? 'yes' : 'no') ~ '.svg') }}</span>
            <span class="label">Enabled</span>
        </div>

        <div class="metric">
            <span class="value">{{ include('@WebProfiler/Icon/' ~ (collector.config.autoUpdate ? 'yes' : 'no') ~ '.svg') }}</span>
            <span class="label">Auto Update</span>
        </div>
    </div>

    <h3>Configured Assets</h3>
    {% if collector.config.assets|length == 0 %}
        <div class="empty">
            <p>There is no asset configured.</p>
        </div>
    {% else %}
        {{ dump(collector.config.assets) }}
    {% endif %}


    <h3>Required assets <small>during this request</small></h3>
    {% if collector.requiredAssets|length == 0 %}
        <div class="empty">
            <p>No assets required during current request. Did you forget to use asset helper in your twig templates?</p>
        </div>
    {% else %}
        <table>
            <thead>
            <tr>
                <th>Required asset</th>
                <th>Existing</th>
                <th>Built</th>
            </tr>
            </thead>
            <tbody>
            {% for asset,info in collector.requiredAssets %}
                <tr>
                    <td>{{ asset }}</td>
                    <td>
                        {{ include('@WebProfiler/Icon/' ~ (info.existed ? 'yes' : 'no') ~ '.svg') }}
                    </td>
                    <td>{{ include('@WebProfiler/Icon/' ~ (info.built ? 'yes' : 'no') ~ '.svg') }}</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    {% endif %}

    <h3>Recent builds</h3>

    {% if collector.getResults()|length == 0 %}
        <div class="empty">
            <p>No recent builds found in cache.</p>
        </div>
    {% else %}
    <table>
        <thead>
            <tr>
                <th>Asset</th>
                <th>File size</th>
                <th>Entry point</th>
                <th>Source Map</th>
                <th title="When the asset has been built at">Last build</th>
                <th>Status</th>
                <th title="Time it took to compile SCSS sources">Duration</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        {% for result in collector.getResults() %}
            {% set assetRequired = result.job.assetName in collector.requiredAssets|keys %}
            {% set assetBuilt = result.job.assetName in collector.builtAssets %}

            <tr class="{{ result.isSuccessful ? '' : 'no-bottom-border bg-error' }} {{ assetRequired ? '' : 'bg-gray' }}">
                <td>
                    <span title="{{ result.job.destinationPath }}">
                        <a href="/{{ result.job.assetName }}" target="_blank">{{ result.job.assetName }}</a>
                    </span>
                </td>
                <td>{{ (result.compiledSize / 1024) | round(1) }} KB</td>
                <td>
                    <span title="{{ result.job.sourceFilePath }}">{{ result.job.sourceFileName }}</span>
                    <span title="Amount of imported files">(<b>{{ result.parsedFiles | length }}</b>)</span>
                </td>
                <td>{{ include('@WebProfiler/Icon/' ~ (result.job.configuration.sourceMap ? 'yes' : 'no') ~ '.svg') }}</td>
                <td>{{ result.executedAt | date }}</td>
                <td>
                    {% if result.isSuccessful %}
                        <b class="success-message">Success</b>
                    {% else %}
                        <b class="error-message">Error</b>
                    {% endif %}
                </td>
                <td>
                    {{ result.duration | round(3) }}s
                </td>
                <td>
                    <a href="#" class="toggle-button" data-toggle-target-id="details_{{ result.job.sanitizedAssetName }}">Details</a>
                </td>
            </tr>

            {% if result.isSuccessful == false %}
                <tr class="bg-error error-line">
                    <td colspan="9">
                        <span class="error-message">{{ result.errorMessage }}</span>
                    </td>
                </tr>
            {% endif %}

            <tr id="details_{{ result.job.sanitizedAssetName }}" class="hidden no-top-border {{ assetRequired ? '' : 'bg-gray' }}">
                <td colspan="9">
                    {{ dump(result) }}
                </td>
            </tr>

        {% endfor %}
        </tbody>
    </table>
    {% endif %}

    <h3>Additional Resources</h3>
    <ul>
        <li><a href="https://github.com/a-r-m-i-n/scssphp-bundle/issues">Report an issue</a></li>
        <li><a href="https://github.com/a-r-m-i-n/scssphp-bundle/blob/master/README.md">Read documentation</a></li>
    </ul>

    <script type="text/javascript">
        function Toggler() {
            "use strict";

            var states = {},

                isCollapsed = function (button) {
                    return Sfjs.hasClass(button, 'closed');
                },

                isExpanded = function (button) {
                    return !isCollapsed(button);
                },

                expand = function (button) {
                    var targetId = button.dataset.toggleTargetId,
                        target = document.getElementById(targetId);

                    if (!target) {
                        throw "Toggle target " + targetId + " does not exist";
                    }

                    if (isCollapsed(button)) {
                        Sfjs.removeClass(button, 'closed');
                        Sfjs.removeClass(target, 'hidden');

                        states[targetId] = 1;
                    }
                },

                collapse = function (button) {
                    var targetId = button.dataset.toggleTargetId,
                        target = document.getElementById(targetId);

                    if (!target) {
                        throw "Toggle target " + targetId + " does not exist";
                    }

                    if (isExpanded(button)) {
                        Sfjs.addClass(button, 'closed');
                        Sfjs.addClass(target, 'hidden');

                        states[targetId] = 0;
                    }
                },

                toggle = function (button) {
                    if (Sfjs.hasClass(button, 'closed')) {
                        expand(button);
                    } else {
                        collapse(button);
                    }
                },

                initButtons = function (buttons) {
                    states = null;

                    // must be an object, not an array or anything else
                    // `typeof` returns "object" also for arrays, so the following
                    // check must be done
                    // see http://stackoverflow.com/questions/4775722/check-if-object-is-array
                    if ('[object Object]' !== Object.prototype.toString.call(states)) {
                        states = {};
                    }

                    for (var i = 0, l = buttons.length; i < l; ++i) {
                        var targetId = buttons[i].dataset.toggleTargetId,
                            target = document.getElementById(targetId);

                        if (!target) {
                            throw "Toggle target " + targetId + " does not exist";
                        }

                        // correct the initial state of the button
                        if (Sfjs.hasClass(target, 'hidden')) {
                            Sfjs.addClass(buttons[i], 'closed');
                        }

                        // attach listener for expanding/collapsing the target
                        clickHandler(buttons[i], toggle);

                        if (states.hasOwnProperty(targetId)) {
                            // open or collapse based on stored data
                            if (0 === states[targetId]) {
                                collapse(buttons[i]);
                            } else {
                                expand(buttons[i]);
                            }
                        }
                    }
                };

            return {
                initButtons: initButtons,

                toggle: toggle,

                isExpanded: isExpanded,

                isCollapsed: isCollapsed,

                expand: expand,

                collapse: collapse
            };
        }
        var toggler = new Toggler(),
            clickHandler = function (element, callback) {
                Sfjs.addEventListener(element, 'click', function (e) {
                    if (!e) {
                        e = window.event;
                    }

                    callback(this);

                    if (e.preventDefault) {
                        e.preventDefault();
                    } else {
                        e.returnValue = false;
                    }

                    e.stopPropagation();

                    return false;
                });
            };
        toggler.initButtons(document.querySelectorAll('a.toggle-button'));
    </script>
{% endblock %}
